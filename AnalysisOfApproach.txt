Analysis:

This code uses Deformable Part Models (DPM) which is very popular for pedestrian detection. I have changed this code a little to fit this problem. 

How effective is he default people detector of openCV in this algorithm?


It works okay after making some changes. Though the main role is played size of the images. As far as many sample dataâ€™s images are concerned, all are approximately 1125 by 750 which works good in detecting humans. So the images lesser than 800 by 750 are being changed to 1125 by 750. In order to fit the output on screen images are again resized to smaller dimensions. Another important role is played by window size when detecting the objects, it has been explained later. 

How does it perform on test images?


To test the algorithm, 60 images from popular website forever21.com have been downloaded. All the images have size approximately 495 by 330 which is very small. Human detector was tested on original sized images and the bounding boxes were poor, thus images have been resized and made bigger, and out of 60, 55 images give good bounding boxes. 

What about time taken by algorithm?


Another parameter that define the window size plays very important role in time taken by the algorithm. There is a trade off between the size of the window and accuracy of the bounding box. Thus, it actually depends on the application, if some compromise can be made in accuracy but not in time taken, the window size should be increased. I have given more importance to accuracy than time taken but it can be easily changed by tweaking winStride. 

Parameter Usage in code:

(rects, weights) = hog.detectMultiScale(image, winStride=(1, 1),padding=(8, 8), scale=1.05)
winStride can be increased to increase the speed, (1,1) tests all he pixels one by one. 

How can Human Detection be made better?


DPM is one of the widely used algorithms for pedestrian/human detection but Deep Neural Network can give way better bounding boxes with little bit of fine tuning done on already present networks on frameworks like Caffe, Torch, tensorFlow etc. It is very easy but there is only one issue with CNN, it requires lots of Data plus it requires resources like GPUs and server (e.g. AWS), which I could not afford or else I would have used DNN instead of traditional Computer Vision algorithm. 

Why no CPU programming for Neural network?


CPU programming is very slow! It takes all the time to train the data and more time is required to fine tune the model. So I decided to try DPM which worked out fine. 

Why are the bounding boxes so wide? 


Bounding boxes can be made smaller, I have written a function for it, you just have to use that function (draw_boxes) instead of default boxes present in openCV. It has been know that default people detector gives the broader bounding boxes. Though I have kept it optional to shrink the box.

To use draw_boxes, just un comment following lines from the code:

line 28
line 62
line 65
line 67 

If these lines are un commented, there would be three windows, input, output, output with smaller bounding box.  

 